class Solution {
    public List<String> getLongestSubsequence(String[] words, int[] groups) {
        return Math.max(getSequence(words, groups, 0).size(),
                        getSequence(words, groups, 1).size()) 
               == getSequence(words, groups, 0).size()
               ? getSequence(words, groups, 0)
               : getSequence(words, groups, 1);
    }

    private List<String> getSequence(String[] words, int[] groups, int startGroup) {
        List<String> result = new ArrayList<>();
        int expectedGroup = startGroup;
        for (int i = 0; i < words.length; i++) {
            if (groups[i] == expectedGroup) {
                result.add(words[i]);
                expectedGroup ^= 1; // Flip 0->1 or 1->0
            }
        }
        return result;
    }
}
